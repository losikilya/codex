import React from 'react';
import App, 
{
    validateCoordinates,
    validateAndParseInputData,
    convertDataToString,
    createOutputFileData,
    splitTextByRows,
    filling,
    drawCanvas,
    drawLine,
    drawRectangle
} from './App';
import { shallow } from 'enzyme'

describe('App render', () => {
  const component = shallow(<App />);
  
  describe('render', () => {
      it('should render and match snapshot', () => {
          expect(component.html()).toMatchSnapshot();
      });
  });
});

describe('test validation', () => {
    test('validateCoordinates', () => {
        const canvasWidth = 10;
        const canvasHiegh = 6;
        expect(validateCoordinates([], canvasWidth, canvasHiegh)).toEqual([]);
        expect(validateCoordinates(['01', '2'], canvasWidth, canvasHiegh)).toEqual([1,2]);
        expect(validateCoordinates([1, 2], canvasWidth, canvasHiegh)).toEqual([1, 2]);
        expect(validateCoordinates(['abc', 'abc'], canvasWidth, canvasHiegh)).toEqual([]);
        expect(validateCoordinates(['abc', '1'], canvasWidth, canvasHiegh)).toEqual([1]);
        expect(validateCoordinates([12, 11], canvasWidth, canvasHiegh)).toEqual([]);
        expect(validateCoordinates([12, 5, 5, 11], canvasWidth, canvasHiegh)).toEqual([5, 5]);        
    });

    test('validateAndParseInputData', () => {
        expect(validateAndParseInputData()).toEqual(false);
        expect(validateAndParseInputData('')).toEqual(false);
        expect(validateAndParseInputData('abc')).toEqual([]);
        expect(validateAndParseInputData('C 10 5')).toEqual([['C', 10, 5]]);
        expect(validateAndParseInputData('C 10 5\nL 3 4 3 4')).toEqual([['C', 10, 5], ['L', 3, 4, 3, 4]]);
        expect(validateAndParseInputData('C 10 5\nL 3 4333 3 4')).toEqual([['C', 10, 5]]);
    });
});

describe('test tools', () => {
    test('convert data to string', () => {
        expect(convertDataToString(123)).toEqual('');
        expect(convertDataToString([123])).toEqual('');
        expect(convertDataToString([])).toEqual('');
        expect(convertDataToString([[]])).toEqual('\n');
        // expect(convertDataToString([['123', 456], [789]])).toBe("123456\n789");        
    });

    test('splitTextByRows', () => {
        expect(splitTextByRows()).toEqual(null);
        expect(splitTextByRows('')).toEqual(null);
        expect(splitTextByRows('1233123123')).toEqual(['1233123123']);
        expect(splitTextByRows('1233123123\n456')).toEqual(['1233123123', '456']);        
    });

    test('createOutputFileData', () => {
        const input = [
            ["C", 20, 4],
            ["L", 1, 2, 6, 2],
            ["L", 6, 3, 6, 4],
            ["R", 16, 1, 20, 3],
            ["B", 10, 3, "o"]
        ];
        const output = [
            ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
            ["|", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "|"],
            ["|", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "|"],
            ["|", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "|"],
            ["|", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "|"],
            ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
            ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
            ["|", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "|"],
            ["|", "x", "x", "x", "x", "x", "x", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "|"],
            ["|", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "|"],
            ["|", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "|"],
            ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
            ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
            ["|", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "|"],
            ["|", "x", "x", "x", "x", "x", "x", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "|"],
            ["|", " ", " ", " ", " ", " ", "x", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "|"],
            ["|", " ", " ", " ", " ", " ", "x", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "|"],
            ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
            ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
            ["|", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "x", "x", "x", "x", "x", "|"],
            ["|", "x", "x", "x", "x", "x", "x", " ", " ", " ", " ", " ", " ", " ", " ", " ", "x", " ", " ", " ", "x", "|"],
            ["|", " ", " ", " ", " ", " ", "x", " ", " ", " ", " ", " ", " ", " ", " ", " ", "x", "x", "x", "x", "x", "|"],
            ["|", " ", " ", " ", " ", " ", "x", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "|"],
            ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
            ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
            ["|", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "x", "x", "x", "x", "x", "|"],
            ["|", "x", "x", "x", "x", "x", "x", "o", "o", "o", "o", "o", "o", "o", "o", "o", "x", " ", " ", " ", "x", "|"],
            ["|", " ", " ", " ", " ", " ", "x", "o", "o", "o", "o", "o", "o", "o", "o", "o", "x", "x", "x", "x", "x", "|"],
            ["|", " ", " ", " ", " ", " ", "x", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "|"],
            ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"]
        ];
        expect(createOutputFileData(input)).toEqual(output);        
    });
});

describe('draw', () => {
    test('drawRectangle', () => {
        const prevState = [
            ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
            ["|", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "|"],
            ["|", "x", "x", "x", "x", "x", "x", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "|"],
            ["|", " ", " ", " ", " ", " ", "x", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "|"],
            ["|", " ", " ", " ", " ", " ", "x", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "|"],
            ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"]
        ];
        const coordinates = [ 16, 1, 20, 3 ];
        const output = [
            ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
            ["|", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "x", "x", "x", "x", "x", "|"],
            ["|", "x", "x", "x", "x", "x", "x", " ", " ", " ", " ", " ", " ", " ", " ", " ", "x", " ", " ", " ", "x", "|"],
            ["|", " ", " ", " ", " ", " ", "x", " ", " ", " ", " ", " ", " ", " ", " ", " ", "x", "x", "x", "x", "x", "|"],
            ["|", " ", " ", " ", " ", " ", "x", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "|"],
            ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"]
        ];
        expect(drawRectangle(prevState, coordinates, true)).toEqual(output);        
    });

    test('drawLine', () => {
        const prevState = [
            ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
            ["|", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "|"],
            ["|", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "|"],
            ["|", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "|"],
            ["|", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "|"],
            ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"]
        ];
        const coordinates = [ 1, 2, 6, 2 ];
        const output = [
            ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
            ["|", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "|"],
            ["|", "x", "x", "x", "x", "x", "x", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "|"],
            ["|", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "|"],
            ["|", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "|"],
            ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"]
        ];
        expect(drawLine(prevState, coordinates)).toEqual(output);        
    });

    test('filling', () => {
        const prevState = [
            ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
            ["|", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "x", "x", "x", "x", "x", "|"],
            ["|", "x", "x", "x", "x", "x", "x", " ", " ", " ", " ", " ", " ", " ", " ", " ", "x", " ", " ", " ", "x", "|"],
            ["|", " ", " ", " ", " ", " ", "x", " ", " ", " ", " ", " ", " ", " ", " ", " ", "x", "x", "x", "x", "x", "|"],
            ["|", " ", " ", " ", " ", " ", "x", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "|"],
            ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"]
        ];
        const coordinates = [ 10, 3 ];
        const output = [
            ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
            ["|", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "x", "x", "x", "x", "x", "|"],
            ["|", "x", "x", "x", "x", "x", "x", "o", "o", "o", "o", "o", "o", "o", "o", "o", "x", " ", " ", " ", "x", "|"],
            ["|", " ", " ", " ", " ", " ", "x", "o", "o", "o", "o", "o", "o", "o", "o", "o", "x", "x", "x", "x", "x", "|"],
            ["|", " ", " ", " ", " ", " ", "x", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "|"],
            ["-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"]
        ];
        expect(filling(prevState, coordinates, 'o')).toEqual(output);        
    });
});
